MonoVarmint is a helpful framework for working with MonoGame.  
It is:
	- open-source (MIT License)
	- Provided as a shared-code project (not dll) to simplify distribution

To get started (Windows Example):

	- Download the MonoVarmint code from github
	- Create a MonoGame project for Windows Desktop
	- Create a Monogame Shared code project
	- Unload your monogame for Windows project, edit the csproj file, and Add shared project references 
	  to your monogame project by adding these lines near the other imports (you will have to corret
	  the relative paths and project names)
			<Import Project="..\..\MonoVarmint\Tools\VarmintTools.projitems" Label="Shared" />
			<Import Project="..\..\MonoVarmint\Widgets\VarmintWidgets.projitems" Label="Shared" />
			<Import Project="..\[Replace with SharedMonoGameProject]" Label="Shared" />
	- Reload your monogame for windows project and make these changes
		- Delete the Game1 class 
		- Copy in MonoVarmint/VarmintWidgets/Templates/GameRunner.cs
		- Change the namespace in the new GameRunner.cs to match your own
	- Delete the Game1 class in the Monogame for Windows project 
	- Create a GameRunner class that inherits from the GameRunner in the shared code project
	- Modify program.cs to construct the new gamerunner class and run it
	- At this point, you should be able to run the windows app and see a default screen with some 
	  instructions on what to do next.
	  
	Now you can start adding screens
	- Create a .vwml file anywhere in your project and set the build action to "embedded resource"
		- The name of this screen will be the filename without extension by default, unless you 
		  explicitely set a name in the vwml file on the root element.
	- In your code call GameController.SetScreen(screenName) to set your screen as the visual element
	
	